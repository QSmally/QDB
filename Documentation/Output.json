{
    "Connection": [
        {
            "Value": "Path",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 29,
            "Description": "Path string to the database.",
            "Type": "{Pathlike}"
        },
        {
            "Value": "ValOptions",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 40,
            "Description": "Options for this Connection.",
            "Type": "{RawOptions}"
        },
        {
            "Value": "Pool",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 69,
            "Description": "Whether this Connection is used in a Pool.",
            "Type": "{Pool?}"
        },
        {
            "Value": "Table",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 80,
            "Description": "Table name of this Connection.",
            "Type": "{String}"
        },
        {
            "Value": "API",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 91,
            "Description": "Raw SQL property.",
            "Type": "{SQL}",
            "Reference": "https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md"
        },
        {
            "Value": "Cache",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 102,
            "Description": "In-memory cached rows.",
            "Type": "{DataStore}",
            "Reference": "https://github.com/QSmally/Qulity/blob/master/Documentation/DataStore.md"
        },
        {
            "Value": "_Executors",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 126,
            "Description": "An object with all additional active operators. I.e. sweep intervals, backups, fetch all entries.",
            "Type": "{Object}"
        },
        {
            "Value": "Size",
            "Flags": [
                "Variable"
            ],
            "Line": 141,
            "Description": "Retrieves all the rows of this Connection.",
            "Action": "Getter",
            "Refer": "Size",
            "Type": "{Number}"
        },
        {
            "Value": "CacheSize",
            "Flags": [
                "Variable"
            ],
            "Line": 152,
            "Description": "Retrieves all the in-memory cached rows of this Connection. Extension of what would be `<Connection>.Cache.size`, but checks for the ready state.",
            "Action": "Getter",
            "Refer": "CacheSize",
            "Type": "{Number}"
        },
        {
            "Value": "Indexes",
            "Flags": [
                "Variable"
            ],
            "Line": 163,
            "Description": "Retrieves all the keys of this database table.",
            "Action": "Getter",
            "Refer": "Indexes",
            "Type": "{Array}"
        },
        {
            "Value": "Disconnect",
            "Flags": [],
            "Line": 174,
            "Description": "Disconnects from this Connection, clears in-memory rows. Only run this method when you are exiting the program, or want to fully disconnect from this database.",
            "Returns": "{Connection}"
        },
        {
            "Value": "_Ready",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 194,
            "Description": "Internal getter. Checks whether this database is ready for execution.",
            "Action": "Getter",
            "Refer": "_Ready",
            "Type": "{Boolean}"
        },
        {
            "Value": "_Resolve",
            "Flags": [
                "Private"
            ],
            "Line": 207,
            "Description": "Internal method. Resolves a dotaccess path or key and parses it.",
            "Params": [
                "{Pathlike} Pathlike String input to be formed and parsed."
            ],
            "Returns": "{Array<String, Array?>} Array containnig a 'Key', and optionally a 'Path'."
        },
        {
            "Value": "_Patch",
            "Flags": [
                "Private"
            ],
            "Line": 219,
            "Description": "Internal method. Inserts or patches something in this Connection's internal cache.",
            "Params": [
                "{String|Number} Key As address to memory map this value to.",
                "{Object|Array} Val The value to set in the memory cache."
            ],
            "Returns": "{DataStore} Returns the updated cache instance of this Connection.",
            "Reference": "https://github.com/QSmally/Qulity/blob/master/Documentation/DataStore.md"
        },
        {
            "Value": "_CastPath",
            "Flags": [
                "Private"
            ],
            "Line": 240,
            "Description": "Internal method. Finds a relative dotaccess pathway of an object.",
            "Params": [
                "{Object|Array} Frame The object-like beginning to cast.",
                "{Array} Pathlike A dotaccess notation path as an Array. Preferred `Path` value from `_Resolve()`.",
                "{Object} [Options] Additional queries for the caster to use."
            ],
            "Returns": "{*} Returns the output of the caster."
        },
        {
            "Value": "AsObject",
            "Flags": [],
            "Line": 275,
            "Description": "Converts this database's rows into an Object. To use dotaccess, use `Fetch` instead.",
            "Returns": "{Object} An object instance with the key/value pairs of this database."
        },
        {
            "Value": "ToIntegratedManager",
            "Flags": [],
            "Line": 285,
            "Description": "Converts this database, or a part of it using dotaccess, to a Manager instance.",
            "Params": [
                "{Pathlike} [Pathlike] Optional dotaccess path pointing towards what to serialise.",
                "{Function} [Holds] Given optional class for which instance this Manager is for."
            ],
            "Returns": "{Manager} A Manager instance with the key/model pairs.",
            "Reference": "https://github.com/QSmally/Qulity/blob/master/Documentation/Manager.md"
        },
        {
            "Value": "Transaction",
            "Flags": [],
            "Line": 302,
            "Description": "Creates a SQL transaction, which allows you to commit or rollback changes.",
            "Returns": "{Transaction?} A Transaction instance, or a nil value when already in a transaction."
        },
        {
            "Value": "Set",
            "Flags": [],
            "Line": 315,
            "Description": "Manages the elements of the database.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies at what row to insert or replace the element at. Use dotaccess notation to edit properties.",
                "{Object|Array|DataModel|*} Value Data to set at the row address, at the location of the key or path."
            ],
            "Returns": "{Connection} Returns the updated database."
        },
        {
            "Value": "Fetch",
            "Flags": [],
            "Line": 338,
            "Description": "Manages the retrieval of the database.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row to fetch or get from cache. Use dotaccess to retrieve properties.",
                "{Boolean} [Cache] Whether to, if not already, cache this entry in results that the next retrieval would be much faster."
            ],
            "Returns": "{Object|Array|DataModel|*} Value of the row, or the property when using dotaccess."
        },
        {
            "Value": "Evict",
            "Flags": [],
            "Line": 365,
            "Description": "Erases elements from this Connection's internal cache.",
            "Params": [
                "{...Pathlike} [Keys] A key or multiple keys to remove from cache. If none, the cache will get cleared entirely."
            ],
            "Returns": "{Connection} Returns the updated database."
        },
        {
            "Value": "Erase",
            "Flags": [],
            "Line": 382,
            "Description": "Manages the deletion of the database.",
            "Params": [
                "{...Pathlike} Keys A key or multiple keys to remove from the database. These elements will also get removed from this Connection's internal cache."
            ],
            "Returns": "{Connection} Returns the updated database."
        },
        {
            "Value": "Exists",
            "Flags": [],
            "Line": 408,
            "Description": "Returns whether or not a row in this database exists. This method also caches the row internally, so fetching it afterwards would be much faster.",
            "Params": [
                "{Pathlike} Key Specifies which row to see if it exists.",
                "{Boolean} [Cache] Whether or not to cache the fetched entry."
            ],
            "Returns": "{Boolean} Whether or not a row exists in this database."
        },
        {
            "Value": "Accumulate",
            "Flags": [],
            "Line": 422,
            "Description": "Accumulates a function on a row, essentially a fetch wrapped in a method. Changes are not recorded on the database.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row to fetch. Use dotaccess to retrieve properties.",
                "{Function} Fn Callback function used to return the row or property.",
                "{Boolean} [Cache] Whether or not to cache the fetched entry."
            ],
            "Returns": "{Connection} Returns the current Connection."
        },
        {
            "Value": "Each",
            "Flags": [],
            "Line": 440,
            "Description": "Iterates through this database's entries.",
            "Params": [
                "{Function} Fn A function which passes on the iterating entries."
            ],
            "Returns": "{Connection} Returns the current Connection."
        },
        {
            "Value": "Find",
            "Flags": [],
            "Line": 455,
            "Description": "Iterates through all the entries of the database, returns the first element found.",
            "Params": [
                "{Function} Fn A tester function which returns a boolean, based on the value(s) of the rows.",
                "{Boolean} [Cache] Whether or not to cache the iterating entries."
            ],
            "Returns": "{*} Returns the row found, or a nil value."
        },
        {
            "Value": "Select",
            "Flags": [],
            "Line": 477,
            "Description": "Locally filters out rows in memory to work with. Please note that this method does increase memory usage in large databases.",
            "Params": [
                "{Function|Pathlike} FnOrPath A filter function which returns a boolean, or a row in the database."
            ],
            "Returns": "{Selection} A Selection class instance."
        },
        {
            "Value": "Push",
            "Flags": [],
            "Line": 502,
            "Description": "Pushes something to an array at the path output.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested array to push to.",
                "{...Any} Values Values to insert and push to this array."
            ],
            "Returns": "{Number} New length of the array."
        },
        {
            "Value": "Shift",
            "Flags": [],
            "Line": 521,
            "Description": "Inserts (if defined) or removes a value to/from the front of the array.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested array to insert to/remove from.",
                "{...Any} [Values] If defined, inserts new values at the front of the array."
            ],
            "Returns": "{Number|*} New length of the array if a value was inserted, or the shifted value."
        },
        {
            "Value": "Pop",
            "Flags": [],
            "Line": 544,
            "Description": "Pops something from an array at the path output.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested array to pop from."
            ],
            "Returns": "{*} Returns the popped value."
        },
        {
            "Value": "Remove",
            "Flags": [],
            "Line": 561,
            "Description": "Removes a specific element from this endpoint array.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested array to remove a value from.",
                "{Function} Fn A function that returns a boolean to which value to remove."
            ],
            "Returns": "{Number} New length of the array."
        },
        {
            "Value": "Ensure",
            "Flags": [],
            "Line": 588,
            "Description": "Inserts an input into a row or nested object if the key or path wasn't found at the endpoint. It can be used as a default schema of the database elements, that gets inserted if there's no entry already.",
            "Params": [
                "{Pathlike} KeyOrPath Context key to see if it exists, either a row or nested property, and optionally insert the new value.",
                "{Object|Array|Schema|*} Input A value to input if the row or nested property wasn't found in the database.",
                "{Boolean} [Merge] Whether or not to merge `Input` with this Connection's Schema model as initial values."
            ],
            "Returns": "{Boolean} Whether or not the new value was inserted."
        },
        {
            "Value": "Modify",
            "Flags": [],
            "Line": 614,
            "Description": "Updates a value in the database by fetching it and passing it onto the callback function.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested property to fetch.",
                "{Function} Fn Callback which includes the original value of the fetched row or property."
            ],
            "Returns": "{Object|Array|DataModel} Returns the new row of the updated property."
        },
        {
            "Value": "Invert",
            "Flags": [],
            "Line": 632,
            "Description": "Inverts a boolean, from true to false and vice-versa, at the endpoint of the path.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested property to boolean-invert."
            ],
            "Returns": "{Boolean} Returns the updated boolean value of the property."
        },
        {
            "Value": "",
            "Flags": [
                "Typedef"
            ],
            "Line": 653,
            "Description": "Options for a database Connection. All integer related options are in milliseconds. ",
            "Typedef": "{Object} RawOptions",
            "Params": [
                "{String} Table A name for the table to use at this path for this Connection.",
                "{Schema} Schema Link to a database Schema class for automatic data migration.",
                "{Boolean} WAL Whether or not to enable Write Ahead Logging mode. ",
                "{Boolean} Cache Whether to enable in-memory caching of entries in results that the next retrieval would be much faster.",
                "{Boolean} FetchAll Whether or not to fetch all the database entries on start-up of this database Connection.",
                "{Boolean} UtilCache Whether or not to cache entries while performing utility tasks, such as the Exists and Accumulate methods.",
                "{Boolean} IterCache Whether to cache iterating entries while performing utility tasks, like the Each and Select methods. ",
                "{Number} CacheMaxSize Amount to be considered the maximum size. If this threshold is hit, the cache will temporarily stop adding new entries.",
                "{Number} SweepInterval Integer to indicate at what interval to sweep the entries of this Connection's internal cache.",
                "{Number} SweepLifetime The minimum age of an entry in the cache to consider being sweepable after an interval. ",
                "{Number} SnapshotLifetime After how many intervals to merge the latest snapshot backups into one.",
                "{Number} BackupInterval Integer to indicate at what interval to create a snapshot backup, or merge the snapshots.",
                "{Pathlike} BackupDirectory A path URL to the directory to insert all the database backups in."
            ]
        },
        {
            "Value": "",
            "Flags": [
                "Typedef"
            ],
            "Line": 676,
            "Description": "An entry which has been resolved from the Connection's internal cache.",
            "Typedef": "{Object|Array} DataModel",
            "Params": [
                "{String|Number} _DataStore Identifier of this model.",
                "{Number} _Timestamp Date when this entry was last patched, used for sweeping of the cache."
            ]
        }
    ],
    "Schema": [
        {
            "Value": "Model",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 21,
            "Description": "The default model of this Schema.",
            "Type": "{Object|Array}"
        },
        {
            "Value": "_Serialiser",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 32,
            "Description": "A Serialiser function that converts an entry to a rich DataModel on request.",
            "Type": "{Function?}"
        },
        {
            "Value": "Serialise",
            "Flags": [
                "Variable"
            ],
            "Line": 49,
            "Description": "Serialises a supposed database entry to this Schema's rich DataModel, if this Schema was instantiated with a Serialiser method.",
            "Action": "Getter",
            "Refer": "Serialise",
            "Type": "{Function}"
        },
        {
            "Value": "Instance",
            "Flags": [],
            "Line": 61,
            "Description": "Public method. Integrates an entry object and integrates them with this Schema's Model.",
            "Params": [
                "{Object} Target The main entry to compare against and to merge changes into."
            ],
            "Returns": "{Object} A merged data object based on this Schema's Model."
        }
    ],
    "Transaction": [
        {
            "Value": "_Connection",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 13,
            "Description": "Transaction's Connection reference.",
            "Type": "{Connection}"
        },
        {
            "Value": "Active",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 23,
            "Description": "Whether this Transaction is active.",
            "Type": "{Boolean}"
        },
        {
            "Value": "Commit",
            "Flags": [],
            "Line": 40,
            "Description": "Commits the changes made during this Transaction.",
            "Returns": "{Boolean} Whether the changed were committed."
        },
        {
            "Value": "Rollback",
            "Flags": [],
            "Line": 54,
            "Description": "Rolls back the changes made before the start of this Transaction. This also clears the contents of the Connection's internal cache.",
            "Returns": "{Boolean} Whether the changed were reset."
        }
    ],
    "Selection": [
        {
            "Value": "Cache",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 17,
            "Description": "Cached dataset instances of this Selection.",
            "Type": "{Collection}",
            "Reference": "https://github.com/QSmally/Qulity/blob/master/Documentation/Collection.md"
        },
        {
            "Value": "Holds",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 32,
            "Description": "Reference to the table this Selection holds.",
            "Type": "{String}"
        },
        {
            "Value": "Keys",
            "Flags": [
                "Variable"
            ],
            "Line": 46,
            "Description": "Serialises this Selection's keys into an array.",
            "Action": "Getter",
            "Refer": "Keys",
            "Type": "{Array}"
        },
        {
            "Value": "Values",
            "Flags": [
                "Variable"
            ],
            "Line": 55,
            "Description": "Serialises this Selection's values into an array.",
            "Action": "Getter",
            "Refer": "Values",
            "Type": "{Array}"
        },
        {
            "Value": "AsObject",
            "Flags": [
                "Variable"
            ],
            "Line": 64,
            "Description": "Serialises this Selection into an object.",
            "Action": "Getter",
            "Refer": "AsObject",
            "Type": "{Object}"
        },
        {
            "Value": "Sort",
            "Flags": [],
            "Line": 76,
            "Description": "Sorts this Selection's values. Identical to the `SORT BY` SQL statement.",
            "Params": [
                "{Function} Fn Function that determines the sort order."
            ],
            "Returns": "{Selection}"
        },
        {
            "Value": "Filter",
            "Flags": [],
            "Line": 88,
            "Description": "Filters values that satisfy the provided function. Identical to the `FILTER BY` SQL statement.",
            "Params": [
                "{Function} Fn Function that determines which entries to keep."
            ],
            "Returns": "{Selection}"
        },
        {
            "Value": "Limit",
            "Flags": [],
            "Line": 104,
            "Description": "Slices off values from this Selection. Identical to the `LIMIT` SQL statement.",
            "Params": [
                "{Number} Begin Integer to indicate the beginning to slice.",
                "{Number} [End] Integer to indicate the end of the slice."
            ],
            "Returns": "{Selection}"
        },
        {
            "Value": "Group",
            "Flags": [],
            "Line": 127,
            "Description": "Groups this Selection based on an identifier. Identical to the `GROUP BY` SQL statement.",
            "Params": [
                "{Pathlike} Key Indicates by which element to group this Selection."
            ],
            "Returns": "{Selection}"
        },
        {
            "Value": "Join",
            "Flags": [],
            "Line": 153,
            "Description": "Joins another Selection into this instance based on a referrer field. Identical to the `FULL JOIN` SQL statement.",
            "Params": [
                "{Selection} Secondary Another Selection instance to join into this one.",
                "{String} Field Which field to check for a reference to this Selection's rows.",
                "{Boolean|String} [Property] Boolean false to flatten the entries into this Selection's rows, a string value that implicitly indicates the property to add the merging entries, or a boolean true to use the Selection's table name as property."
            ],
            "Returns": "{Selection}"
        },
        {
            "Value": "Map",
            "Flags": [],
            "Line": 186,
            "Description": "Iterates over this Selection's values and keys, and implements the new values returned from the callback.",
            "Params": [
                "{Function} Fn Callback function which determines the new values of the Selection."
            ],
            "Returns": "{Selection}"
        },
        {
            "Value": "Merge",
            "Flags": [],
            "Line": 201,
            "Description": "Automatically clones the merging Selections and adds them into this instance.",
            "Params": [
                "{...Selection} Selections Instances to clone and merge into this one."
            ],
            "Returns": "{Selection}"
        },
        {
            "Value": "Clone",
            "Flags": [],
            "Line": 216,
            "Description": "Creates a new memory allocation for the copy of this Selection.",
            "Params": [
                "{String} [Holds] Optional new identifier value for the cloned Selection."
            ],
            "Returns": "{Selection}"
        }
    ],
    "Pool": [
        {
            "Value": "Path",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 17,
            "Description": "Path string to the Pool directory.",
            "Type": "{Pathlike}"
        },
        {
            "Value": "Store",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 28,
            "Description": "A collection of databases this Pool holds.",
            "Type": "{DataStore}",
            "Reference": "https://github.com/QSmally/Qulity/blob/master/Documentation/DataStore.md"
        },
        {
            "Value": "ValOptions",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 40,
            "Description": "Options for this Pool.",
            "Type": "{PoolOptions}"
        },
        {
            "Value": "_BackupManager",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 67,
            "Description": "The manager that handles backups of this Pool.",
            "Type": "{Function?}"
        },
        {
            "Value": "Select",
            "Flags": [],
            "Line": 84,
            "Description": "Retrieves a database Connection from this Pool instance.",
            "Params": [
                "{String} Base Reference link to the Connection to resolve."
            ],
            "Returns": "{Connection}"
        },
        {
            "Value": "Disconnect",
            "Flags": [],
            "Line": 94,
            "Description": "Disconnects from all the Connections or Gateways in this Pool. When threaded, this Pool exits the thread asynchronously.",
            "Returns": "{Pool}"
        },
        {
            "Value": "",
            "Flags": [
                "Typedef"
            ],
            "Line": 115,
            "Description": "Options for a database Pool. All integer related options are in milliseconds. ",
            "Typedef": "{Object} PoolOptions",
            "Params": [
                "{Object<Identifier, RawOptions>} Exclusives Non-default options to use for certain Connections to a database. ",
                "{Boolean} WAL Default setting to enable Write Ahead Logging mode for Connections in this Pool.",
                "{Boolean} Cache Whether to enable in-memory caching of entries in results that the next retrieval would be much faster.",
                "{Boolean} UtilCache Whether or not to cache entries while performing utility tasks, such as the Exists and Accumulate methods.",
                "{Boolean} IterCache Whether to cache iterating entries while performing utility tasks, like the Each and Select methods. ",
                "{Number} CacheMaxSize Amount to be considered the maximum size. If this threshold is hit, the cache will temporarily stop adding new entries.",
                "{Number} SweepInterval Integer to indicate at what interval to sweep the entries of the Connection's internal cache.",
                "{Number} SweepLifetime The minimum age of an entry in the cache to consider being sweepable after an interval. ",
                "{Number} BackupInterval Integer to indicate at what interval to create a backup at.",
                "{Pathlike} BackupDirectory A path URL to the directory to insert all the database backups in."
            ]
        }
    ]
}