{
    "Connection": [
        {
            "Value": "Path",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 29,
            "Description": "Path string to the database.",
            "Type": "{Pathlike}"
        },
        {
            "Value": "ValOptions",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 40,
            "Description": "Options for this Connection.",
            "Type": "{RawOptions}"
        },
        {
            "Value": "Pool",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 65,
            "Description": "Whether this Connection is used in a Pool.",
            "Type": "{Pool?}"
        },
        {
            "Value": "Table",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 76,
            "Description": "Table name of this Connection.",
            "Type": "{String}"
        },
        {
            "Value": "API",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 87,
            "Description": "Raw SQL property.",
            "Type": "{SQL}",
            "Reference": "https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md"
        },
        {
            "Value": "Cache",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 98,
            "Description": "In-memory cached rows.",
            "Type": "{DataStore}",
            "Reference": "https://github.com/QSmally/Qulity/blob/master/Documentation/DataStore.md"
        },
        {
            "Value": "_Executors",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 122,
            "Description": "An object with all additional active operators. I.e. sweep intervals, backups, fetch all entries.",
            "Type": "{Object}"
        },
        {
            "Value": "Size",
            "Flags": [
                "Variable"
            ],
            "Line": 137,
            "Description": "Retrieves all the rows of this database.",
            "Action": "Getter",
            "Refer": "Size",
            "Type": "{Number}"
        },
        {
            "Value": "CacheSize",
            "Flags": [
                "Variable"
            ],
            "Line": 148,
            "Description": "Retrieves all the in-memory cached rows of this Connection. Extension of what would be `<Connection>.Cache.size`, but checks for the ready state.",
            "Action": "Getter",
            "Refer": "CacheSize",
            "Type": "{Number}"
        },
        {
            "Value": "Indexes",
            "Flags": [
                "Variable"
            ],
            "Line": 159,
            "Description": "Retrieves all the keys of this database table.",
            "Action": "Getter",
            "Refer": "Indexes",
            "Type": "{Array}"
        },
        {
            "Value": "Disconnect",
            "Flags": [],
            "Line": 170,
            "Description": "Disconnects from this Connection, clears in-memory rows. Only run this method when you are exiting the program, or want to fully disconnect from this database.",
            "Returns": "{Connection}"
        },
        {
            "Value": "_Ready",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 190,
            "Description": "Internal method. Checks whether this database is ready for execution.",
            "Action": "Getter",
            "Refer": "_Ready",
            "Type": "{Boolean}"
        },
        {
            "Value": "_Resolve",
            "Flags": [
                "Private"
            ],
            "Line": 203,
            "Description": "Internal method. Resolves a dotaccess path or key and parses it.",
            "Params": [
                "{Pathlike} Pathlike String input to be formed and parsed."
            ],
            "Returns": "{Array<String, Array?>} Array containnig a 'Key', and optionally a 'Path'."
        },
        {
            "Value": "_Patch",
            "Flags": [
                "Private"
            ],
            "Line": 215,
            "Description": "Internal method. Sets or patches something in this Connection's internal cache.",
            "Params": [
                "{String|Number} Key As address to memory map this value.",
                "{Object|Array} Value The value to cache in the memory."
            ],
            "Returns": "{DataStore} Returns the updated cache.",
            "Reference": "https://github.com/QSmally/Qulity/blob/master/Documentation/DataStore.md"
        },
        {
            "Value": "_CastPath",
            "Flags": [
                "Private"
            ],
            "Line": 231,
            "Description": "Internal method. Finds a relative dotaccess pathway of a frame.",
            "Params": [
                "{Object|Array} Frame The object-like beginning to cast.",
                "{Array} Pathlike A dotaccess notation path as an Array. Preferred `Path` value from `_Resolve()`.",
                "{Object} [Options] Additional queries for the caster to use."
            ],
            "Returns": "{*}"
        },
        {
            "Value": "AsObject",
            "Flags": [],
            "Line": 264,
            "Description": "Converts this database's rows into an Object. To use dotaccess, use `Fetch` instead.",
            "Returns": "{Object} An object instance with the key/value pairs of this database."
        },
        {
            "Value": "ToIntegratedManager",
            "Flags": [],
            "Line": 274,
            "Description": "Converts this database, or a part of it using dotaccess, to a Manager instance.",
            "Params": [
                "{Pathlike} [Pathlike] Optional dotaccess path pointing towards what to serialise.",
                "{Function} [Holds] Given optional class for which instance this Manager is for."
            ],
            "Returns": "{Manager} A Manager instance with the key/model pairs.",
            "Reference": "https://github.com/QSmally/Qulity/blob/master/Documentation/Manager.md"
        },
        {
            "Value": "Transaction",
            "Flags": [],
            "Line": 291,
            "Description": "Creates a SQL transaction, which allows you to commit or rollback changes.",
            "Returns": "{Transaction?} A Transaction instance, or a nil value when already in a transaction."
        },
        {
            "Value": "Set",
            "Flags": [],
            "Line": 304,
            "Description": "Manages the elements of the database.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies at what row to insert or replace the element at. Use dotaccess notation to edit properties.",
                "{Object|Array|*} Value Data to set at the row address, at the location of the key or path."
            ],
            "Returns": "{Connection} Returns the updated database."
        },
        {
            "Value": "Fetch",
            "Flags": [],
            "Line": 327,
            "Description": "Manages the retrieval of the database.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row to fetch or get from cache. Use dotaccess to retrieve properties.",
                "{Boolean} [Cache] Whether to, if not already, cache this entry in results that the next retrieval would be much faster."
            ],
            "Returns": "{Object|Array|DataModel|*} Value of the row, or the property when using dotaccess."
        },
        {
            "Value": "Evict",
            "Flags": [],
            "Line": 354,
            "Description": "Erases elements from this Connection's internal cache.",
            "Params": [
                "{...Pathlike} [Keys] A key or multiple keys to remove from cache. If none, the cache will get cleared entirely."
            ],
            "Returns": "{Connection} Returns the updated database."
        },
        {
            "Value": "Erase",
            "Flags": [],
            "Line": 371,
            "Description": "Manages the deletion of the database.",
            "Params": [
                "{...Pathlike} Keys A key or multiple keys to remove from the database. These elements will also get removed from this Connection's internal cache."
            ],
            "Returns": "{Connection} Returns the updated database."
        },
        {
            "Value": "Exists",
            "Flags": [],
            "Line": 397,
            "Description": "Returns whether or not a row in this database exists. This method also caches the row internally, so fetching it afterwards would be much faster.",
            "Params": [
                "{Pathlike} Key Specifies which row to see if it exists.",
                "{Boolean} [Cache] Whether or not to cache the fetched entry."
            ],
            "Returns": "{Boolean} Whether or not a row exists in this database."
        },
        {
            "Value": "Accumulate",
            "Flags": [],
            "Line": 411,
            "Description": "Accumulates a function on a row, essentially a fetch wrapped in a method. Changes are not recorded on the database.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row to fetch. Use dotaccess to retrieve properties.",
                "{Function} Fn Callback function used to return the row or property.",
                "{Boolean} [Cache] Whether or not to cache the fetched entry."
            ],
            "Returns": "{Connection} Returns the current Connection."
        },
        {
            "Value": "Each",
            "Flags": [],
            "Line": 429,
            "Description": "Iterates through this database's entries.",
            "Params": [
                "{Function} Fn A function which passes on the iterating entries.",
                "{Boolean} [Cache] Whether or not to cache the iterating entries."
            ],
            "Returns": "{Connection} Returns this database."
        },
        {
            "Value": "Find",
            "Flags": [],
            "Line": 447,
            "Description": "Iterates through all the entries of the database, returns the first element found.",
            "Params": [
                "{Function} Fn A tester function which returns a boolean, based on the value(s) of the rows.",
                "{Boolean} [Cache] Whether or not to cache the iterating entries."
            ],
            "Returns": "{*} Returns the row found, or a nil value."
        },
        {
            "Value": "Select",
            "Flags": [],
            "Line": 465,
            "Description": "Locally filters out rows in memory to work with. Please note that this method does increase memory usage in large databases.",
            "Params": [
                "{Function|Pathlike} FnOrPath A filter function which returns a boolean, or a row in the database.",
                "{Boolean} [Cache] Whether or not to cache the iterating entries."
            ],
            "Returns": "{Selection} A Selection class instance."
        },
        {
            "Value": "Push",
            "Flags": [],
            "Line": 494,
            "Description": "Pushes something to an array at the path output.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested array to push to.",
                "{...Any} Values Values to insert and push to this array."
            ],
            "Returns": "{Connection} Returns the updated database."
        },
        {
            "Value": "Shift",
            "Flags": [],
            "Line": 513,
            "Description": "Inserts (if defined) or removes a value to/from the front of the array.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested array to insert to/remove from.",
                "{...Any} [Values] If defined, inserts new values at the front of the array."
            ],
            "Returns": "{Number|*} New length of the array if a value was inserted, or the shifted value."
        },
        {
            "Value": "Pop",
            "Flags": [],
            "Line": 536,
            "Description": "Pops something from an array at the path output.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested array to pop from."
            ],
            "Returns": "{*} Returns the popped value."
        },
        {
            "Value": "Remove",
            "Flags": [],
            "Line": 553,
            "Description": "Removes a specific element from this endpoint array.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested array to remove from.",
                "{Function} Fn A function that returns a boolean to which value to remove."
            ],
            "Returns": "{Connection} Returns the updated database."
        },
        {
            "Value": "Ensure",
            "Flags": [],
            "Line": 580,
            "Description": "Inserts an input into a row or nested object if the key or path wasn't found at the endpoint. It can be used as a default schema of the database elements, that gets inserted if there's no entry already.",
            "Params": [
                "{Pathlike} KeyOrPath Context key to see if it exists, either a row or nested property, and optionally insert the new value.",
                "{*} Input A value to input if the row or nested property wasn't found in the database."
            ],
            "Returns": "{Boolean} Whether or not the new value was inserted."
        },
        {
            "Value": "Modify",
            "Flags": [],
            "Line": 603,
            "Description": "Updates a value in the database by fetching it and passing it onto the callback function.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested property to fetch.",
                "{Function} Fn Callback which includes the original value of the fetched row or property."
            ],
            "Returns": "{*} Returns the new row of the updated property."
        },
        {
            "Value": "Invert",
            "Flags": [],
            "Line": 620,
            "Description": "Inverts a boolean, from true to false and vice-versa, at the endpoint of the path.",
            "Params": [
                "{Pathlike} KeyOrPath Specifies which row or nested property to boolean-invert."
            ],
            "Returns": "{Boolean} Updated boolean value of the property."
        },
        {
            "Value": "",
            "Flags": [
                "Typedef"
            ],
            "Line": 641,
            "Description": "Options for a database Connection. All integer related options are in milliseconds. ",
            "Typedef": "{Object} RawOptions",
            "Params": [
                "{String} Table A name for the table to use at this path for this Connection.",
                "{Schema} Schema Link to a database Schema class for automatic data migration.",
                "{Boolean} WAL Whether or not to enable Write Ahead Logging mode. ",
                "{Boolean} Cache Whether to enable in-memory caching of entries in results that the next retrieval would be much faster.",
                "{Boolean} FetchAll Whether or not to fetch all the database entries on start-up of this database Connection.",
                "{Boolean} UtilCache Whether or not to cache entries while performing utility tasks, such as the Exists and Accumulate methods.",
                "{Boolean} IterCache Whether to cache iterating entries while performing utility tasks, like the Each and Select methods.",
                "{Number} SweepInterval Integer to indicate at what interval to sweep the entries of this Connection's internal cache.",
                "{Number} SweepLifetime The minimum age of an entry in the cache to consider being sweepable after an interval. ",
                "{Number} SnapshotLifetime After how many intervals to merge the latest snapshot backups into one.",
                "{Number} BackupInterval Integer to indicate at what interval to create a snapshot backup, or merge the snapshots.",
                "{Pathlike} BackupDirectory A path URL to the directory to insert all the database backups in."
            ]
        },
        {
            "Value": "",
            "Flags": [
                "Typedef"
            ],
            "Line": 662,
            "Description": "An entry which has been resolved from the Connection's internal cache.",
            "Typedef": "{Object|Array} DataModel",
            "Params": [
                "{String|Number|Function} _DataStore Identifier of this model."
            ]
        }
    ],
    "Schema": [
        {
            "Value": "Model",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 21,
            "Description": "The default model of this Schema.",
            "Type": "{Object|Array}"
        },
        {
            "Value": "Serialiser",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 32,
            "Description": "A Serialiser function that converts an entry to a rich DataModel on request.",
            "Type": "{Function?}"
        },
        {
            "Value": "Serialise",
            "Flags": [
                "Variable"
            ],
            "Line": 49,
            "Description": "Serialises a supposed database entry to this Schema's rich DataModel, if this Schema was instantiated with a Serialiser method.",
            "Action": "Getter",
            "Refer": "Serialise",
            "Type": "{Function}"
        },
        {
            "Value": "Migrate",
            "Flags": [],
            "Line": 60,
            "Description": "Public method. Integrates an entry object and merges them with this Schema's Model.",
            "Params": [
                "{Object} Target A main entry object to compare against, and to integrate changes to."
            ],
            "Returns": "{Object} A merged object, based on this Schema's Model."
        }
    ],
    "Transaction": [
        {
            "Value": "_Connection",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 13,
            "Description": "Transaction's Connection reference.",
            "Type": "{Connection}"
        },
        {
            "Value": "Active",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 23,
            "Description": "Whether this Transaction is active.",
            "Type": "{Boolean}"
        },
        {
            "Value": "Commit",
            "Flags": [],
            "Line": 40,
            "Description": "Commits the changes made during this Transaction.",
            "Returns": "{Boolean} Whether the changed were committed."
        },
        {
            "Value": "Rollback",
            "Flags": [],
            "Line": 53,
            "Description": "Rolls back the changes made before the start of this Transaction. This also clears the contents of the Connection's internal cache.",
            "Returns": "{Boolean} Whether the changed were reset."
        }
    ],
    "Selection": [
        {
            "Value": "Keys",
            "Flags": [
                "Variable"
            ],
            "Line": 22,
            "Description": "Serialises this Selection's keys into an array.",
            "Action": "Getter",
            "Refer": "Keys",
            "Type": "{Array}"
        },
        {
            "Value": "Values",
            "Flags": [
                "Variable"
            ],
            "Line": 31,
            "Description": "Serialises this Selection's values into an array.",
            "Action": "Getter",
            "Refer": "Values",
            "Type": "{Array}"
        },
        {
            "Value": "AsObject",
            "Flags": [
                "Variable"
            ],
            "Line": 40,
            "Description": "Serialises this Selection into an object.",
            "Action": "Getter",
            "Refer": "AsObject",
            "Type": "{Object}"
        },
        {
            "Value": "Sort",
            "Flags": [],
            "Line": 50,
            "Description": "Sorts this Selection's values. Identical to the `SORT BY` SQL statement.",
            "Params": [
                "{Function} Fn Function that determines the sort order."
            ],
            "Returns": "{Selection}"
        },
        {
            "Value": "Filter",
            "Flags": [],
            "Line": 62,
            "Description": "Filters values that satisfy the provided function. Identical to the `FILTER BY` SQL statement.",
            "Params": [
                "{Function} Fn Function that determines which entries to keep."
            ],
            "Returns": "{Selection}"
        },
        {
            "Value": "Limit",
            "Flags": [],
            "Line": 78,
            "Description": "Slices off values from this Selection. Identical to the `LIMIT begin, end` SQL statement.",
            "Params": [
                "{Number} Begin Integer to indicate the beginning to slice.",
                "{Number} [End] Integer to indicate the end of the slice."
            ],
            "Returns": "{Selection}"
        }
    ],
    "Pool": [
        {
            "Value": "Path",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 17,
            "Description": "Path string to the Pool directory.",
            "Type": "{Pathlike}"
        },
        {
            "Value": "Databases",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 28,
            "Description": "A collection of databases this Pool holds.",
            "Type": "{DataStore}",
            "Reference": "https://github.com/QSmally/Qulity/blob/master/Documentation/DataStore.md"
        },
        {
            "Value": "ValOptions",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 40,
            "Description": "Options for this Pool.",
            "Type": "{PoolOptions}"
        },
        {
            "Value": "_BackupManager",
            "Flags": [
                "Variable",
                "Private"
            ],
            "Line": 68,
            "Description": "The manager that handles backups of this Pool.",
            "Type": "{Function?}"
        },
        {
            "Value": "$",
            "Flags": [],
            "Line": 82,
            "Description": "Retrieves a database Connection (or a ThreadProvider if this Pool is multithreaded).",
            "Params": [
                "{String} Base Reference link to the Connection to resolve."
            ],
            "Returns": "{Connection|ThreadProvider}"
        },
        {
            "Value": "Disconnect",
            "Flags": [],
            "Line": 93,
            "Description": "Disconnects from all the Connections in this Pool.",
            "Returns": "{Pool}"
        },
        {
            "Value": "",
            "Flags": [
                "Typedef"
            ],
            "Line": 113,
            "Description": "Options for a database Pool. All integer related options are in milliseconds. ",
            "Typedef": "{Object} PoolOptions",
            "Params": [
                "{Object<Filename, RawOptions>} Exclusives Non-default options to use for certain Connections to a database.",
                "{Boolean} Threads A boolean value to indicate whether to create a thread for each Connection in this Pool. ",
                "{String} Table A default table name for each Connection in this Pool.",
                "{Boolean} WAL Default setting to enable Write Ahead Logging mode for Connections in this Pool.",
                "{Boolean} Cache Whether to enable in-memory caching of entries in results that the next retrieval would be much faster.",
                "{Boolean} UtilCache Whether or not to cache entries while performing utility tasks, such as the Exists and Accumulate methods.",
                "{Boolean} IterCache Whether to cache iterating entries while performing utility tasks, like the Each and Select methods.",
                "{Number} SweepInterval Integer to indicate at what interval to sweep the entries of the Connection's internal cache.",
                "{Number} SweepLifetime The minimum age of an entry in the cache to consider being sweepable after an interval. ",
                "{Number} BackupInterval Integer to indicate at what interval to create a backup at.",
                "{Pathlike} BackupDirectory A path URL to the directory to insert all the database backups in."
            ]
        }
    ],
    "PartialConnection": [
        {
            "Value": "State",
            "Flags": [
                "Variable",
                "ReadOnly"
            ],
            "Line": 12,
            "Description": "Current state of this Connection.",
            "Type": "{String}"
        }
    ]
}